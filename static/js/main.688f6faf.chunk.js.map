{"version":3,"sources":["assets/Spiderman-reading.jpg","comics/DetailView.js","comics/ComicDisplay.js","comics/ComicResults.js","comics/ComicSearch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DetailView","props","p","comicToView","thumbnail","path","e","extension","className","src","alt","title","dates","date","description","Button","onClick","detailViewOff","ComicDisplay","useState","setComicToView","increase","setOffset","offset","then","console","log","fetchComicResults","detailView","setDetailView","searchBarOn","comicResults","map","comic","ind","Card","key","detailViewOn","searchBarOff","CardImg","top","width","CardBody","CardTitle","length","ComicResults","setComicResults","url","comicName","fetch","result","json","data","results","useEffect","searchBar","ComicSearch","setComicName","comicResultsPage","setComicResultsPage","setSearchBar","Form","onSubmit","preventDefault","FormGroup","Label","htmlFor","Input","name","value","onChange","target","type","window","location","reload","App","Spiderman","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.688f6faf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spiderman-reading.eab2a831.jpg\";","import React from 'react';\r\nimport {Button} from 'reactstrap';\r\n\r\nconst DetailView = (props) => {\r\n    const p = props.comicToView.thumbnail.path;\r\n    const e = props.comicToView.thumbnail.extension;\r\n    \r\n    return(\r\n        <div className=\"detailView\">\r\n            <img src={`${p}/landscape_incredible.${e}`} alt=\"Image Not Available\" />\r\n            <h1>{props.comicToView.title}</h1>\r\n            <h6>On Sale Date: {props.comicToView.dates[0].date}</h6>\r\n            <p>{props.comicToView.description}</p>\r\n            <Button onClick={()=> {props.detailViewOff()}}>Back To Results</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailView;","import React, {useState} from 'react';\r\nimport {Card, CardImg, CardBody, CardTitle, CardSubtitle, Button} from 'reactstrap';\r\n\r\nimport DetailView from './DetailView'\r\n\r\nconst ComicDisplay = (props) => {\r\n    // const [detailView, setDetailView] = useState(false);\r\n    const [comicToView, setComicToView] = useState({});\r\n\r\n    const detailViewOn = (comic) => {\r\n        props.setDetailView(true);\r\n        setComicToView(comic);\r\n    }\r\n\r\n    const detailViewOff = () => {\r\n        props.setDetailView(false);\r\n    }\r\n\r\n    const increaseOffset = () => {\r\n        props.setOffset(props.offset + 20);\r\n        // console.log(props.offset);\r\n        // props.fetchComicResults();\r\n    }\r\n\r\n    const increase = () => {\r\n        increaseOffset()\r\n        .then(console.log(props.offset))\r\n        .then(props.fetchComicResults())\r\n    }\r\n\r\n    const decreaseOffset = () => {\r\n        props.setOffset(props.offset - 20);\r\n        console.log(props.offset);\r\n        props.fetchComicResults();\r\n    }\r\n\r\n    const comicDisplayGrid = () => {\r\n        console.log(props.offset);\r\n        console.log(props.comicResults);\r\n        return props.comicResults.map((comic, ind) => {\r\n            const p = comic.thumbnail.path;\r\n            const e = comic.thumbnail.extension;\r\n\r\n            return (\r\n                  <Card key={ind} className=\"card\">\r\n                    <Button className=\"button\" onClick={()=> {detailViewOn(comic); props.searchBarOff()}}><CardImg top width=\"100%\" src={`${p}/standard_xlarge.${e}`} alt=\"Image Not Available\" /></Button>\r\n                    <CardBody>\r\n                      <CardTitle>{comic.title}</CardTitle>\r\n                    </CardBody>\r\n                  </Card>\r\n              );\r\n        })\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n        {\r\n            props.detailView ? \r\n            <DetailView comicToView={comicToView} detailViewOff={detailViewOff} searchBarOn={props.searchBarOn} /> : \r\n        <div>\r\n             <Button onClick={()=>{props.searchBarOn()}}>Back To Search</Button>\r\n             <p>Click An Image For Detail View</p>\r\n                <div className=\"container\">\r\n                {comicDisplayGrid()}\r\n                </div>\r\n                <div className=\"navButtons\">\r\n            {props.offset > -20 ? <Button className=\"previousPage\" onClick={()=>{decreaseOffset()}}>Previous Page</Button> : null}\r\n            {props.comicResults.length == 20 ? <Button className=\"nextPage\" onClick={()=>{increase()}}>Next Page</Button> : null}\r\n            </div>\r\n        </div>\r\n    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicDisplay;","import React, {useState, useEffect} from 'react';\r\nimport {Button} from 'reactstrap';\r\n\r\nimport ComicDisplay from './ComicDisplay';\r\n\r\nconst ComicResults = (props) => {\r\n    const [comicResults, setComicResults] = useState([]);\r\n    const [offset, setOffset] = useState(0);\r\n\r\n    const baseURL = 'https://gateway.marvel.com:443/v1/public/comics?';\r\n    const apikey = '94bfc2c1e9454783329b955ba1751491'\r\n\r\n    const fetchComicResults = () => {\r\n        console.log(offset);\r\n        let url = `${baseURL}titleStartsWith=${props.comicName}&offset=${offset}&apikey=${apikey}`;\r\n        console.log(url);\r\n        fetch(url)\r\n        .then(result => result.json())\r\n        .then(json => {setComicResults(json.data.results)})\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchComicResults();\r\n    }, [])\r\n\r\n    return(\r\n        <div>\r\n            {comicResults.length == 0 ? <></> : <ComicDisplay comicResults={comicResults} searchBar={props.searchBar} searchBarOn={props.searchBarOn} searchBarOff={props.searchBarOff} detailView={props.detailView} setDetailView={props.setDetailView} offset={offset} setOffset={setOffset} fetchComicResults={fetchComicResults} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicResults;","import React, {useState} from 'react';\r\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap';\r\n\r\nimport ComicResults from './ComicResults';\r\n\r\nconst ComicSearch = (props) => {\r\n    const [comicName, setComicName] = useState('');\r\n    const [comicResultsPage, setComicResultsPage] = useState(false);\r\n    const [searchBar, setSearchBar] = useState(true);\r\n\r\n    const searchBarOff = () => {\r\n      setSearchBar(false);\r\n    }\r\n  \r\n    const searchBarOn = (e) => {\r\n      window.location.reload();\r\n    }\r\n\r\n    const comicResultsPageOn = (e) => {\r\n        e.preventDefault();\r\n        setComicResultsPage(true);\r\n        searchBarOff();\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {searchBar ?\r\n            <div>\r\n            <h1>Search For a Marvel Comic Series</h1>\r\n            <Form onSubmit={comicResultsPageOn}>\r\n                <FormGroup>\r\n                    <Label htmlFor='comicName'/>\r\n                    <Input name='comicName' value={comicName} onChange={(e) => setComicName(e.target.value)} />\r\n                    <Button type='submit'>Search</Button>\r\n                </FormGroup>\r\n            </Form> \r\n            </div>\r\n            : <></> \r\n            // : <Button onClick={()=>{searchBarOn()}}>Back To Search</Button>\r\n            }\r\n            {comicResultsPage ? <ComicResults comicName={comicName} searchBar={searchBar} searchBarOn={searchBarOn} searchBarOff={searchBarOff} setComicName={setComicName} detailView={props.detailView} setDetailView={props.setDetailView} /> : <></>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicSearch;","import React, {useState} from 'react';\nimport Spiderman from './assets/Spiderman-reading.jpg';\nimport './App.css';\nimport ComicSearch from './comics/ComicSearch';\n\nfunction App() {\n  const [detailView, setDetailView] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {detailView == false ?\n      <div>\n        <h1>Marvel Mayhem</h1>\n        <img src={Spiderman} className=\"App-logo\" alt=\"logo\" />\n      </div>\n      : <></>\n      }\n        <ComicSearch detailView={detailView} setDetailView={setDetailView} />\n        {/* <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}