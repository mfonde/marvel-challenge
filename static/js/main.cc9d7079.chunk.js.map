{"version":3,"sources":["assets/Spiderman-reading.jpg","comics/DetailView.js","comics/ComicDisplay.js","comics/ComicResults.js","comics/ComicSearch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DetailView","props","Button","onClick","detailViewOff","ComicDisplay","useState","detailView","setDetailView","className","comicResults","map","comic","ind","p","thumbnail","path","e","extension","Card","key","CardSubtitle","CardImg","top","width","src","alt","CardBody","CardTitle","title","ComicResults","setComicResults","useEffect","url","comicName","console","log","fetch","then","result","json","data","results","fetchComicResults","length","ComicSearch","setComicName","Form","onSubmit","preventDefault","FormGroup","Label","htmlFor","Input","name","value","onChange","target","type","App","Spiderman","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,+C,kRCY5BC,EATI,SAACC,GAChB,OACI,6BACI,mDACA,kBAACC,EAAA,EAAD,CAAQC,QAAS,WAAMF,EAAMG,kBAA7B,aCmCGC,EArCM,SAACJ,GAAW,IAAD,EACQK,oBAAS,GADjB,mBACrBC,EADqB,KACTC,EADS,KA4B5B,OACI,6BACCD,EAAa,kBAAC,EAAD,CAAYH,cAvBR,WAClBI,GAAc,MAsB+C,yBAAKC,UAAU,aAlBrER,EAAMS,aAAaC,KAAI,SAACC,EAAOC,GAClC,IAAMC,EAAIF,EAAMG,UAAUC,KACpBC,EAAIL,EAAMG,UAAUG,UAE1B,OACM,kBAACC,EAAA,EAAD,CAAMC,IAAKP,EAAKJ,UAAU,QACxB,kBAACY,EAAA,EAAD,oCACA,kBAACnB,EAAA,EAAD,CAAQC,QAAS,WAf7BK,GAAc,KAesC,kBAACc,EAAA,EAAD,CAASC,KAAG,EAACC,MAAM,OAAOC,IAAG,UAAKX,EAAL,4BAA0BG,GAAKS,IAAI,yBACxG,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAYhB,EAAMiB,eCUzBC,EAhCM,SAAC7B,GAAW,IAAD,EACYK,mBAAS,IADrB,mBACrBI,EADqB,KACPqB,EADO,KAyB5B,OAJAC,qBAAU,YAdgB,WACtB,IAAIC,EAAG,UALK,mDAKL,2BAAgChC,EAAMiC,UAAtC,mBAJI,oCAKXC,QAAQC,IAAIH,GACZI,MAAMJ,GACLK,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAE,GAAI,OAAIT,EAAgBS,EAAKC,KAAKC,YAUxCC,KACD,IAGC,6BAC4B,GAAvBjC,EAAakC,OAAc,qCAAQ,kBAAC,EAAD,CAAclC,aAAcA,MCF7DmC,EAxBK,WAAO,IAAD,EACYvC,mBAAS,IADrB,mBACf4B,EADe,KACJY,EADI,OAEkBxC,oBAAS,GAF3B,mBAEfI,EAFe,KAEDqB,EAFC,KAStB,OACI,6BACI,gEACA,kBAACgB,EAAA,EAAD,CAAMC,SARS,SAAC/B,GACpBA,EAAEgC,iBACFlB,GAAgB,KAOR,kBAACmB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,QAAQ,cACf,kBAACC,EAAA,EAAD,CAAOC,KAAK,YAAYC,MAAOrB,EAAWsB,SAAU,SAACvC,GAAD,OAAO6B,EAAa7B,EAAEwC,OAAOF,UACjF,kBAACrD,EAAA,EAAD,CAAQwD,KAAK,UAAb,YAGPhD,EAAe,kBAAC,EAAD,CAAcwB,UAAWA,IAAgB,uCCCtDyB,MApBf,WACE,OACE,yBAAKlD,UAAU,OAEX,6CACA,yBAAKgB,IAAKmC,IAAWnD,UAAU,WAAWiB,IAAI,SAC9C,kBAAC,EAAD,MACA,uBACEjB,UAAU,WACVoD,KAAK,sBACLJ,OAAO,SACPK,IAAI,uBAJN,iBCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.cc9d7079.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spiderman-reading.eab2a831.jpg\";","import React from 'react';\r\nimport {Button} from 'reactstrap';\r\n\r\nconst DetailView = (props) => {\r\n    return(\r\n        <div>\r\n            <h1>This Is Detail View</h1>\r\n            <Button onClick={()=> {props.detailViewOff()}}>Go Back</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailView;","import React, {useState} from 'react';\r\nimport {Card, CardImg, CardBody, CardTitle, CardSubtitle, Button} from 'reactstrap';\r\n\r\nimport DetailView from './DetailView'\r\n\r\nconst ComicDisplay = (props) => {\r\n    const [detailView, setDetailView] = useState(false);\r\n\r\n    const detailViewOn = () => {\r\n        setDetailView(true);\r\n    }\r\n\r\n    const detailViewOff = () => {\r\n        setDetailView(false);\r\n    }\r\n\r\n    const comicDisplayGrid = () => {\r\n        return props.comicResults.map((comic, ind) => {\r\n            const p = comic.thumbnail.path;\r\n            const e = comic.thumbnail.extension;\r\n\r\n            return (\r\n                  <Card key={ind} className=\"card\">\r\n                    <CardSubtitle>Click Image For Detail View</CardSubtitle>\r\n                    <Button onClick={()=> {detailViewOn()}}><CardImg top width=\"100%\" src={`${p}/standard_xlarge.${e}`} alt=\"Image Not Available\" /></Button>\r\n                    <CardBody>\r\n                      <CardTitle>{comic.title}</CardTitle>\r\n                    </CardBody>\r\n                  </Card>\r\n              );\r\n        })\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n        {detailView ? <DetailView detailViewOff={detailViewOff} /> : <div className=\"container\">\r\n            {comicDisplayGrid()}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicDisplay;","import React, {useState, useEffect} from 'react';\r\n\r\nimport ComicDisplay from './ComicDisplay';\r\n\r\nconst ComicResults = (props) => {\r\n    const [comicResults, setComicResults] = useState([]);\r\n\r\n    const baseURL = 'https://gateway.marvel.com:443/v1/public/comics?';\r\n    const apikey = '94bfc2c1e9454783329b955ba1751491'\r\n    // let url;\r\n\r\n    const fetchComicResults = () => {\r\n        let url = `${baseURL}titleStartsWith=${props.comicName}&apikey=${apikey}`;\r\n        console.log(url);\r\n        fetch(url)\r\n        .then(result => result.json())\r\n        .then(json => setComicResults(json.data.results))\r\n        // .then(json => console.log(json.data.results), console.log(comicResults))\r\n        // .then(console.log(comicResults))\r\n        // .then(res => res.json())\r\n        // .then(data => setComicResults(data))\r\n        // .then(data => console.log(data))\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchComicResults();\r\n    }, [])\r\n\r\n    return(\r\n        <div>\r\n            {comicResults.length == 0 ? <></> : <ComicDisplay comicResults={comicResults} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicResults;","import React, {useState} from 'react';\r\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap';\r\n\r\nimport ComicResults from './ComicResults';\r\n\r\nconst ComicSearch = () => {\r\n    const [comicName, setComicName] = useState('');\r\n    const [comicResults, setComicResults] = useState(false);\r\n\r\n    const comicResultsOn = (e) => {\r\n        e.preventDefault();\r\n        setComicResults(true);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Search For a Marvel Comic Series</h1>\r\n            <Form onSubmit={comicResultsOn}>\r\n                <FormGroup>\r\n                    <Label htmlFor='comicName'/>\r\n                    <Input name='comicName' value={comicName} onChange={(e) => setComicName(e.target.value)} />\r\n                    <Button type='submit'>Search</Button>\r\n                </FormGroup>\r\n            </Form>\r\n            {comicResults ? <ComicResults comicName={comicName} /> : <></>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicSearch;","import React from 'react';\nimport Spiderman from './assets/Spiderman-reading.jpg';\nimport './App.css';\nimport ComicSearch from './comics/ComicSearch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\"> */}\n        <h1>Marvel Mayhem</h1>\n        <img src={Spiderman} className=\"App-logo\" alt=\"logo\" />\n        <ComicSearch/>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      {/* </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}